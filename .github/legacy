# NewYear's gimmick
# Check if the value for "year" is already stored in session_state, and initialize if not
#if "year" not in st.session_state:
#    st.session_state.year = "2024"
year = st.select_slider("Happy New Year!", options=["2024", "2025"])
if year == "2025": # Check if the slider is set to "2025"
    st.markdown(
        """
        <style>
            .custom-text {
                font-size: 32px;  /* Adjust the size as needed */
                color: #FF4500;   /* Optional: Set the color */
                text-align: center; /* Center the text */
            }
        </style>
        <div class="custom-text">ðŸŽ†ðŸŽ‡ðŸŽ†ðŸŽ‡</div>
        """,
        unsafe_allow_html=True
    )
st.title("")



# old login logic in main window
# Side-by-side layout for username and PIN code
#col1, col2, col3 = st.columns([2, 2, 1])  # Adjust column ratios as needed
# User selection dropdown
#with col1:
#    username = st.selectbox("Select User", options=list(USER_DATABASE.keys()),label_visibility="collapsed",placeholder="Username")
# PIN code input field
#with col2:
#    pincode = st.text_input("Enter PIN Code", type="password", label_visibility="collapsed",placeholder="PIN")
#with col3:
#    login = st.button("Login",use_container_width=True)


#login logic in sidebar
# Login-part
# Initialize session state
if 'logged_in' not in st.session_state:
    st.session_state['logged_in'] = False
if 'username' not in st.session_state:
    st.session_state['username'] = None  # To store the username after successful login

# Use sidebar for login (more room for input fields)
if not st.session_state['logged_in']:
    # Automatically open the sidebar on first visit by showing the login UI
    st.sidebar.header("Login")
    username = st.sidebar.selectbox("Select User", options=list(USER_DATABASE.keys()))
    pincode = st.sidebar.text_input("Enter PIN Code", type="password", placeholder="PIN")
    login = st.sidebar.button("Login")

    # Login Validation
    if login:
        if username in USER_DATABASE and pincode == USER_DATABASE[username]:
            st.session_state['logged_in'] = True  # Mark as logged in
            st.session_state['username'] = username  # Store username in session state
            st.success(f"Welcome, {username}!")
            # Optionally, wait a moment before removing the login UI
            time.sleep(1)
        else:
            st.sidebar.error("Invalid username or PIN!")
else:
    # If already logged in, show a message or the main content
    st.sidebar.empty()  # Hide the login form when logged in
    #st.success(f"You're logged in as {username}!")



    
## Filter before visualization
## date filter was never used though
### FILTER THE DATA FOR VISUALISATION
    ## USER FILTER
    st.subheader("Filter")
    user_selection = st.multiselect(
        "Select Users",
        log_data['User'].unique(),
        default=list(log_data['User'].unique())  # Set default to all unique users
        )
    
    ## DATE FILTER
    col1, col2 = st.columns([1, 1])
    with col2:
        # Date range selection for end date
        max_date = datetime.strptime("2025-12-31", "%Y-%m-%d").date()
        end_date = st.date_input(
            "End Date",
            value=max_date if max_date else datetime.now().date(),  # Default to the max date in the data or today
            min_value=log_data['Timestamp'].min().date(),
            max_value=max_date
        )

    with col1:
        # Set the start date to 90 days before the end date or the minimum date in the data
        # This code will be executed after the end_date has been set
        if 'end_date' in locals():  # Check if end_date has been set
            start_date = st.date_input(
                "Start Date",
                value=(datetime.combine(end_date, datetime.min.time()) - timedelta(days=90)).date(),
                min_value=log_data['Timestamp'].min().date(),
                max_value=end_date
            )
        else:
            # Handle the case where end_date is not yet defined
            start_date = st.date_input(
                "Start Date",
                value=log_data['Timestamp'].min().date(),
                min_value=log_data['Timestamp'].min().date(),
                max_value=log_data['Timestamp'].max().date()
            )
